name: Deploy Client App

on:
  push:
    branches: [master, develop, staging]
    paths:
      - "prisma_client/**"
  pull_request:
    branches: [master]
    paths:
      - "prisma_client/**"

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EAS_PROJECT_ID: 12a19ebe-4dc8-457b-99e9-ccc269808a5c
  BACKEND_HEALTH_URL: ${{ secrets.BACKEND_HEALTH_URL }}

jobs:
  # Job 1: Deploy Client Mobile App (OTA Updates)
  deploy-mobile-app:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./prisma_client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./prisma_client/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Setup EAS CLI
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Determine update type and branch
        id: update-info
        run: |
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "branch=production" >> $GITHUB_OUTPUT
            echo "message=🚀 Production update: ${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
            echo "channel=production" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "branch=development" >> $GITHUB_OUTPUT
            echo "message=🔧 Development update: ${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
            echo "channel=development" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "branch=staging" >> $GITHUB_OUTPUT
            echo "message=🧪 Staging update: ${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
            echo "channel=staging" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Publish OTA update
        run: |
          eas update --branch ${{ steps.update-info.outputs.branch }} --message "${{ steps.update-info.outputs.message }}"

      - name: Notify deployment status
        if: always()
        run: |
          echo "✅ Update published to ${{ steps.update-info.outputs.branch }} branch"
          echo "📱 Channel: ${{ steps.update-info.outputs.channel }}"
          echo "🌍 Environment: ${{ steps.update-info.outputs.environment }}"

  # Job 2: Deploy Client Backend Server
  deploy-backend-server:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            cd /home/${{ secrets.DO_USERNAME }}/prisma/server
            git pull origin master
            docker compose down
            docker compose build --no-cache
            docker compose up -d
            docker system prune -f

      - name: Health Check
        run: |
          # configurable health URL, with sensible default
          url="${BACKEND_HEALTH_URL}"
          if [ -z "$url" ]; then
            url="http://${{ secrets.DO_HOST }}:8000/api/v1/health/"
          fi

          echo "Checking backend health at $url"

          # wait for containers to be ready
          for i in $(seq 1 20); do
            if curl -fsS "$url" > /dev/null; then
              echo "Backend is healthy"
              exit 0
            fi
            echo "Attempt $i failed; retrying in 5s..."
            sleep 5
          done
          echo "Backend did not become healthy in time" >&2
          exit 1

  # Job 3: Run Tests (Optional)
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./prisma_client

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "./prisma_client/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit
